#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ .err —Ñ–∞–π–ª–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—è .mid —Ñ–∞–π–ª–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""

import json
import re
import sys
import argparse
from pathlib import Path
from typing import List, Dict, Optional


class ErrorFileAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä .err —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞—Ä –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç"""
    
    def __init__(self):
        self.qa_pairs = []
    
    def extract_qa_from_text(self, text: str) -> List[Dict[str, str]]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–∞—Ä—ã –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏
        
        Args:
            text: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –æ—Ç–≤–µ—Ç–∞–º–∏
        """
        pairs = []
        
        # –£–±–∏—Ä–∞–µ–º <think> –±–ª–æ–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        text = re.sub(r'<think>.*?</think>', '', text, flags=re.DOTALL)
        
        # –ü—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–∞—Ä question-answer
        pattern = r'"question"\s*:\s*"([^"]+)"[^}]*"answer"\s*:\s*"([^"]+)"'
        
        matches = re.findall(pattern, text, re.DOTALL | re.IGNORECASE)
        
        for match in matches:
            if len(match) >= 2:
                question = match[0].strip()
                answer = match[1].strip()
                
                # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                question = self.clean_text(question)
                answer = self.clean_text(answer)
                
                if question and answer and len(question) > 5 and len(answer) > 5:
                    pairs.append({
                        "question": question,
                        "answer": answer
                    })
        
        return pairs
    
    def clean_text(self, text: str) -> str:
        """
        –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        
        Args:
            text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            
        Returns:
            –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ escape-—Å–∏–º–≤–æ–ª—ã
        text = text.replace('\\"', '"')
        text = text.replace('\\n', ' ')
        text = text.replace('\\t', ' ')
        text = text.replace('\\r', ' ')
        
        # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
        text = re.sub(r'\s+', ' ', text)
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        text = text.strip()
        
        return text
    
    def analyze_error_file(self, error_file_path: str) -> List[Dict[str, str]]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç .err —Ñ–∞–π–ª –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –ø–∞—Ä—ã –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç
        
        Args:
            error_file_path: –ü—É—Ç—å –∫ .err —Ñ–∞–π–ª—É
            
        Returns:
            –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ä –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç
        """
        try:
            with open(error_file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–ª–æ–∫–∏ –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—é
            blocks = content.split('=' * 50)
            
            for block in blocks:
                if '–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:' in block:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏
                    response_start = block.find('–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:')
                    if response_start != -1:
                        response_text = block[response_start + len('–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:'):].strip()
                        
                        # –ò—â–µ–º –ø–∞—Ä—ã –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç
                        pairs = self.extract_qa_from_text(response_text)
                        if pairs:
                            print(f"üîç –í –±–ª–æ–∫–µ –Ω–∞–π–¥–µ–Ω–æ {len(pairs)} –ø–∞—Ä")
                            self.qa_pairs.extend(pairs)
                        else:
                            print(f"‚ö†Ô∏è  –í –±–ª–æ–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–∞—Ä")
            
            return self.qa_pairs
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞ {error_file_path}: {e}")
            return []
    
    def save_to_mid_file(self, output_path: str) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –ø–∞—Ä—ã –≤ .mid —Ñ–∞–π–ª
        
        Args:
            output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è .mid —Ñ–∞–π–ª–∞
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            if not self.qa_pairs:
                print("‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                return False
            
            output_data = {
                "source_error_file": "extracted_from_err",
                "total_questions": len(self.qa_pairs),
                "extraction_date": self.get_current_time(),
                "qa_pairs": self.qa_pairs
            }
            
            with open(output_path, 'w', encoding='utf-8') as f:
                json.dump(output_data, f, ensure_ascii=False, indent=2)
            
            print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(self.qa_pairs)} –ø–∞—Ä –≤ {output_path}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
            return False
    
    def get_current_time(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        import time
        return time.strftime("%Y-%m-%d %H:%M:%S")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    parser = argparse.ArgumentParser(
        description="–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä .err —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞—Ä –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç"
    )
    parser.add_argument("error_file", help="–ü—É—Ç—å –∫ .err —Ñ–∞–π–ª—É")
    parser.add_argument("-o", "--output", help="–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è .mid —Ñ–∞–π–ª–∞")
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ .err —Ñ–∞–π–ª–∞
    if not Path(args.error_file).exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.error_file}")
        sys.exit(1)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    if args.output:
        output_path = args.output
    else:
        # –°–æ–∑–¥–∞–µ–º .mid —Ñ–∞–π–ª –≤ —Ç–æ–º –∂–µ –∫–∞—Ç–∞–ª–æ–≥–µ, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è .err —Ñ–∞–π–ª
        error_path = Path(args.error_file)
        error_name = error_path.stem
        output_path = error_path.parent / f"{error_name}.mid"
    
    print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é .err —Ñ–∞–π–ª...")
    print(f"üìÅ –§–∞–π–ª –æ—à–∏–±–æ–∫: {args.error_file}")
    print(f"üíæ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output_path}")
    print("-" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = ErrorFileAnalyzer()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º .err —Ñ–∞–π–ª
    qa_pairs = analyzer.analyze_error_file(args.error_file)
    
    if qa_pairs:
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(qa_pairs)} –ø–∞—Ä –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ .mid —Ñ–∞–π–ª
        if analyzer.save_to_mid_file(output_path):
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω .mid —Ñ–∞–π–ª: {output_path}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å .mid —Ñ–∞–π–ª")
            sys.exit(1)
    else:
        print("‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –ø–∞—Ä—ã –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç")
        sys.exit(1)


if __name__ == "__main__":
    main()
