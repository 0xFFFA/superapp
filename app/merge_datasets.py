#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è .json –∏ .mid —Ñ–∞–π–ª–æ–≤
"""

import json
import sys
import argparse
from pathlib import Path
from typing import List, Dict


class DatasetMerger:
    """–û–±—ä–µ–¥–∏–Ω–∏—Ç–µ–ª—å –¥–∞—Ç–∞—Å–µ—Ç–æ–≤"""
    
    def __init__(self):
        self.existing_qa_pairs = []
        self.new_qa_pairs = []
    
    def load_json_dataset(self, file_path: str) -> List[Dict[str, str]]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞—Ç–∞—Å–µ—Ç –∏–∑ .json —Ñ–∞–π–ª–∞
        
        Args:
            file_path: –ü—É—Ç—å –∫ .json —Ñ–∞–π–ª—É
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø–∞—Ä –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç
        """
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä—ã –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç
            if 'qa_pairs' in data:
                qa_pairs = data['qa_pairs']
            elif isinstance(data, list):
                qa_pairs = data
            else:
                print(f"‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤ {file_path}")
                return []
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(qa_pairs)} –ø–∞—Ä –∏–∑ {file_path}")
            return qa_pairs
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {file_path}: {e}")
            return []
    
    def load_mid_dataset(self, file_path: str) -> List[Dict[str, str]]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞—Ç–∞—Å–µ—Ç –∏–∑ .mid —Ñ–∞–π–ª–∞
        
        Args:
            file_path: –ü—É—Ç—å –∫ .mid —Ñ–∞–π–ª—É
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø–∞—Ä –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç
        """
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä—ã –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç
            if 'qa_pairs' in data:
                qa_pairs = data['qa_pairs']
            elif isinstance(data, list):
                qa_pairs = data
            else:
                print(f"‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤ {file_path}")
                return []
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(qa_pairs)} –ø–∞—Ä –∏–∑ {file_path}")
            return qa_pairs
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {file_path}: {e}")
            return []
    
    def merge_datasets(self, json_file: str, mid_file: str) -> List[Dict[str, str]]:
        """
        –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–≤–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞
        
        Args:
            json_file: –ü—É—Ç—å –∫ .json —Ñ–∞–π–ª—É
            mid_file: –ü—É—Ç—å –∫ .mid —Ñ–∞–π–ª—É
            
        Returns:
            –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–∞—Ä –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç
        """
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–∞—Ç–∞—Å–µ—Ç
        self.existing_qa_pairs = self.load_json_dataset(json_file)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–π –¥–∞—Ç–∞—Å–µ—Ç
        self.new_qa_pairs = self.load_mid_dataset(mid_file)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º
        merged_pairs = self.existing_qa_pairs + self.new_qa_pairs
        
        print(f"üìä –û–±—ä–µ–¥–∏–Ω–µ–Ω–æ: {len(self.existing_qa_pairs)} + {len(self.new_qa_pairs)} = {len(merged_pairs)} –ø–∞—Ä")
        
        return merged_pairs
    
    def save_merged_dataset(self, merged_pairs: List[Dict[str, str]], output_path: str, 
                           original_json_path: str) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç
        
        Args:
            merged_pairs: –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–∞—Ä
            output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            original_json_path: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É .json —Ñ–∞–π–ª—É
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            output_data = {
                "source_pdf": "merged_dataset",
                "total_questions": len(merged_pairs),
                "generation_date": self.get_current_time(),
                "model_used": "merged_from_multiple_sources",
                "original_json": original_json_path,
                "qa_pairs": merged_pairs
            }
            
            with open(output_path, 'w', encoding='utf-8') as f:
                json.dump(output_data, f, ensure_ascii=False, indent=2)
            
            print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(merged_pairs)} –ø–∞—Ä –≤ {output_path}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
            return False
    
    def get_current_time(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        import time
        return time.strftime("%Y-%m-%d %H:%M:%S")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    parser = argparse.ArgumentParser(
        description="–û–±—ä–µ–¥–∏–Ω–∏—Ç–µ–ª—å –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ .json –∏ .mid"
    )
    parser.add_argument("json_file", help="–ü—É—Ç—å –∫ .json —Ñ–∞–π–ª—É")
    parser.add_argument("mid_file", help="–ü—É—Ç—å –∫ .mid —Ñ–∞–π–ª—É")
    parser.add_argument("-o", "--output", help="–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    if not Path(args.json_file).exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.json_file}")
        sys.exit(1)
    
    if not Path(args.mid_file).exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.mid_file}")
        sys.exit(1)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    if args.output:
        output_path = args.output
    else:
        # –°–æ–∑–¥–∞–µ–º merged —Ñ–∞–π–ª –≤ —Ç–æ–º –∂–µ –∫–∞—Ç–∞–ª–æ–≥–µ, –≥–¥–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã
        json_path = Path(args.json_file)
        base_name = json_path.stem
        output_path = json_path.parent / f"{base_name}.final.json"
    
    print("üîó –û–±—ä–µ–¥–∏–Ω—è—é –¥–∞—Ç–∞—Å–µ—Ç—ã...")
    print(f"üìÅ JSON —Ñ–∞–π–ª: {args.json_file}")
    print(f"üìÅ MID —Ñ–∞–π–ª: {args.mid_file}")
    print(f"üíæ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output_path}")
    print("-" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–∏—Ç–µ–ª—å
    merger = DatasetMerger()
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞—Ç–∞—Å–µ—Ç—ã
    merged_pairs = merger.merge_datasets(args.json_file, args.mid_file)
    
    if merged_pairs:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if merger.save_merged_dataset(merged_pairs, output_path, args.json_file):
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω –¥–∞—Ç–∞—Å–µ—Ç: {output_path}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç")
            sys.exit(1)
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –¥–∞—Ç–∞—Å–µ—Ç—ã")
        sys.exit(1)


if __name__ == "__main__":
    main()
