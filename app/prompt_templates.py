#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Улучшенные промпт-шаблоны для обучения моделей
Содержит различные шаблоны для генерации данных и обучения
"""

from typing import Dict, List, Optional
import random


class PromptTemplates:
    """Класс с улучшенными промпт-шаблонами"""
    
    @staticmethod
    def get_enhanced_training_template() -> str:
        """
        Возвращает улучшенный шаблон для обучения модели
        """
        return """Ты - эксперт по горному делу и промышленному оборудованию с многолетним опытом работы. 
Твоя задача - давать точные, структурированные и практически полезные ответы на вопросы по технической документации.

### Контекст:
Ты анализируешь техническую документацию по горному делу, промышленному оборудованию, 
безопасности производства и смежным техническим областям.

### Вопрос: {question}

### Ответ:
{answer}

### Конец"""

    @staticmethod
    def get_qa_generation_prompt(text_chunk: str, num_questions: int) -> str:
        """
        Возвращает улучшенный промпт для генерации вопросов-ответов
        """
        return f"""Ты - эксперт по созданию качественных обучающих данных для технических моделей.

Создай {num_questions} качественных вопросов-ответов на основе технического текста.

Текст:
{text_chunk}

ТРЕБОВАНИЯ К ВОПРОСАМ:
1. Вопросы должны быть конкретными и практичными
2. Охватывать разные уровни сложности (фактические, аналитические, прикладные)
3. Включать как базовые понятия, так и сложные технические аспекты
4. Формулировать вопросы так, чтобы ответы были полезны для практического применения

ТРЕБОВАНИЯ К ОТВЕТАМ:
1. Ответы должны быть полными и структурированными
2. Включать конкретные данные, цифры, формулы, единицы измерения
3. Объяснять "почему" и "как" - причинно-следственные связи
4. Быть полезными для практического применения в производстве
5. Содержать техническую терминологию и профессиональные понятия
6. Минимальная длина ответа - 50 символов

ФОРМАТ ОТВЕТА:
- Начинай с прямого ответа на вопрос
- Добавляй технические детали и формулы
- Объясняй практическое применение
- Указывай единицы измерения и числовые значения

ФОРМАТ JSON:
[
  {{"question": "Конкретный технический вопрос", "answer": "Подробный структурированный ответ с формулами и примерами"}},
  {{"question": "Аналитический вопрос", "answer": "Ответ с объяснением причин, следствий и практического применения"}}
]

ПРИМЕР ХОРОШЕГО ОТВЕТА:
"Коэффициент крепости Протодьяконова определяется по формуле f = σсж/100, где σсж - предел прочности породы на сжатие в кг/см². Этот коэффициент используется для классификации пород по крепости: f < 2 - очень слабые породы (глина, песок), f = 2-4 - слабые (сланцы), f = 4-8 - средние (известняк), f = 8-15 - крепкие (гранит), f > 15 - очень крепкие породы. Знание коэффициента крепости необходимо для выбора способа крепления выработок и расчета параметров взрывных работ."

ВАЖНО: 
- Ответ должен быть ВАЛИДНЫМ JSON массивом
- Только массив, никаких дополнительных полей
- Проверь JSON на валидность перед отправкой"""

    @staticmethod
    def get_validation_prompt() -> str:
        """
        Возвращает промпт для валидации качества данных
        """
        return """Ты - эксперт по контролю качества обучающих данных.

Проанализируй пару вопрос-ответ и оцени её качество по следующим критериям:

1. КАЧЕСТВО ВОПРОСА:
   - Конкретность и ясность
   - Техническая точность
   - Практическая значимость

2. КАЧЕСТВО ОТВЕТА:
   - Полнота и структурированность
   - Техническая точность
   - Наличие конкретных данных
   - Практическая применимость

3. СООТВЕТСТВИЕ КОНТЕКСТУ:
   - Соответствие технической документации
   - Использование правильной терминологии

Верни оценку в формате:
{{
  "quality_score": 1-10,
  "issues": ["список проблем"],
  "suggestions": ["предложения по улучшению"]
}}"""

    @staticmethod
    def get_context_aware_template(context: str = "") -> str:
        """
        Возвращает контекстно-зависимый шаблон
        """
        base_template = """Ты - эксперт по горному делу и промышленному оборудованию.

### Специализация: {specialization}

### Контекст документации:
{context}

### Вопрос: {question}

### Ответ:
{answer}

### Конец"""
        
        specializations = [
            "горное дело и подземные работы",
            "промышленное оборудование и механизация",
            "безопасность производства и охрана труда",
            "геология и разведка месторождений",
            "обогащение полезных ископаемых"
        ]
        
        specialization = random.choice(specializations)
        
        return base_template.format(
            specialization=specialization,
            context=context or "Техническая документация по промышленному производству"
        )

    @staticmethod
    def get_multi_step_reasoning_template() -> str:
        """
        Возвращает шаблон для многошагового рассуждения
        """
        return """Ты - эксперт по горному делу и промышленному оборудованию.

### Задача:
Проанализируй вопрос и дай структурированный ответ с пошаговым рассуждением.

### Вопрос: {question}

### Ответ:
**Шаг 1: Анализ вопроса**
{analysis}

**Шаг 2: Техническое обоснование**
{technical_reasoning}

**Шаг 3: Практическое применение**
{practical_application}

**Шаг 4: Итоговый ответ**
{final_answer}

### Конец"""

    @staticmethod
    def get_quality_control_prompt() -> str:
        """
        Возвращает промпт для контроля качества ответов
        """
        return """Ты - контролер качества технических ответов.

Проверь ответ на соответствие следующим критериям:

1. ТЕХНИЧЕСКАЯ ТОЧНОСТЬ:
   - Правильность формул и расчетов
   - Корректность единиц измерения
   - Соответствие стандартам и нормативам

2. ПОЛНОТА ОТВЕТА:
   - Минимальная длина: 50 символов
   - Наличие конкретных данных
   - Объяснение практического применения

3. СТРУКТУРИРОВАННОСТЬ:
   - Логическая последовательность
   - Четкое разделение на части
   - Использование технической терминологии

4. ПРАКТИЧЕСКАЯ ЦЕННОСТЬ:
   - Применимость в реальных условиях
   - Связь с производственными процессами
   - Полезность для специалистов

Верни оценку: ПРОЙДЕН/НЕ ПРОЙДЕН с указанием причин."""


def create_enhanced_training_text(question: str, answer: str, template_type: str = "enhanced") -> str:
    """
    Создает улучшенный текст для обучения
    
    Args:
        question: Вопрос
        answer: Ответ
        template_type: Тип шаблона ("enhanced", "context_aware", "multi_step")
    
    Returns:
        Форматированный текст для обучения
    """
    if template_type == "enhanced":
        template = PromptTemplates.get_enhanced_training_template()
    elif template_type == "context_aware":
        template = PromptTemplates.get_context_aware_template()
    elif template_type == "multi_step":
        template = PromptTemplates.get_multi_step_reasoning_template()
    else:
        template = PromptTemplates.get_enhanced_training_template()
    
    return template.format(question=question, answer=answer)


def validate_qa_quality(question: str, answer: str) -> Dict:
    """
    Валидирует качество пары вопрос-ответ
    
    Args:
        question: Вопрос
        answer: Ответ
    
    Returns:
        Словарь с оценкой качества
    """
    issues = []
    score = 10
    
    # Проверка длины ответа
    if len(answer) < 50:
        issues.append("Слишком короткий ответ (менее 50 символов)")
        score -= 3
    
    # Проверка на лишние кавычки
    if answer.startswith('"') and answer.endswith('"'):
        issues.append("Лишние кавычки в ответе")
        score -= 1
    
    # Проверка на повторяющиеся слова
    words = answer.split()
    if len(set(words)) < len(words) * 0.7:
        issues.append("Слишком много повторений в ответе")
        score -= 2
    
    # Проверка на наличие технических терминов
    technical_terms = ["коэффициент", "формула", "расчет", "параметр", "характеристика", 
                      "свойство", "процесс", "метод", "технология", "оборудование"]
    if not any(term in answer.lower() for term in technical_terms):
        issues.append("Отсутствуют технические термины")
        score -= 1
    
    # Проверка на наличие цифр или формул
    if not any(char.isdigit() for char in answer):
        issues.append("Отсутствуют числовые данные")
        score -= 1
    
    return {
        "quality_score": max(1, score),
        "issues": issues,
        "passed": score >= 7
    }


if __name__ == "__main__":
    # Тестирование шаблонов
    test_question = "Как определяется коэффициент крепости Протодьяконова?"
    test_answer = "Коэффициент крепости Протодьяконова определяется по формуле f = σсж/100, где σсж - предел прочности породы на сжатие в кг/см²."
    
    print("=== Тест улучшенного шаблона ===")
    print(create_enhanced_training_text(test_question, test_answer))
    
    print("\n=== Тест валидации ===")
    validation = validate_qa_quality(test_question, test_answer)
    print(f"Оценка: {validation['quality_score']}/10")
    print(f"Пройден: {validation['passed']}")
    print(f"Проблемы: {validation['issues']}")
