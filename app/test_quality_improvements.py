#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—É—á–µ–Ω–∏—è
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É–ª—É—á—à–µ–Ω–∏–π
"""

import json
import os
import sys
from pathlib import Path
from typing import Dict, List, Tuple
import time

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ —É–ª—É—á—à–µ–Ω–∏—è
from prompt_templates import PromptTemplates, validate_qa_quality, create_enhanced_training_text


class QualityTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π –∫–∞—á–µ—Å—Ç–≤–∞"""
    
    def __init__(self):
        self.results = {}
    
    def test_prompt_templates(self, test_data: List[Dict]) -> Dict:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–æ–º–ø—Ç-—à–∞–±–ª–æ–Ω—ã
        
        Args:
            test_data: –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é –ø—Ä–æ–º–ø—Ç-—à–∞–±–ª–æ–Ω—ã...")
        
        results = {
            "enhanced": [],
            "context_aware": [],
            "multi_step": []
        }
        
        for qa in test_data[:5]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –ø–µ—Ä–≤—ã—Ö 5 –ø—Ä–∏–º–µ—Ä–∞—Ö
            question = qa['question']
            answer = qa['answer']
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
            for template_type in results.keys():
                try:
                    enhanced_text = create_enhanced_training_text(question, answer, template_type)
                    results[template_type].append({
                        "question": question,
                        "enhanced_text": enhanced_text,
                        "length": len(enhanced_text)
                    })
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —Å —à–∞–±–ª–æ–Ω–æ–º {template_type}: {e}")
        
        return results
    
    def test_data_validation(self, test_data: List[Dict]) -> Dict:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            test_data: –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        print("üîç –¢–µ—Å—Ç–∏—Ä—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö...")
        
        validation_results = {
            "total": len(test_data),
            "passed": 0,
            "failed": 0,
            "issues": [],
            "scores": []
        }
        
        for i, qa in enumerate(test_data):
            validation = validate_qa_quality(qa['question'], qa['answer'])
            validation_results['scores'].append(validation['quality_score'])
            
            if validation['passed']:
                validation_results['passed'] += 1
            else:
                validation_results['failed'] += 1
                validation_results['issues'].extend(validation['issues'])
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if validation_results['scores']:
            validation_results['avg_score'] = sum(validation_results['scores']) / len(validation_results['scores'])
            validation_results['min_score'] = min(validation_results['scores'])
            validation_results['max_score'] = max(validation_results['scores'])
        
        return validation_results
    
    def compare_old_vs_new_prompts(self, test_data: List[Dict]) -> Dict:
        """
        –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∏ –Ω–æ–≤—ã–µ –ø—Ä–æ–º–ø—Ç—ã
        
        Args:
            test_data: –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        """
        print("üìä –°—Ä–∞–≤–Ω–∏–≤–∞—é —Å—Ç–∞—Ä—ã–µ –∏ –Ω–æ–≤—ã–µ –ø—Ä–æ–º–ø—Ç—ã...")
        
        comparison = {
            "old_prompts": [],
            "new_prompts": [],
            "improvements": []
        }
        
        for qa in test_data[:3]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –ø–µ—Ä–≤—ã—Ö 3 –ø—Ä–∏–º–µ—Ä–∞—Ö
            question = qa['question']
            answer = qa['answer']
            
            # –°—Ç–∞—Ä—ã–π –ø—Ä–æ–º–ø—Ç
            old_prompt = f"### –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å.\n\n### –í–æ–ø—Ä–æ—Å: {question}\n\n### –û—Ç–≤–µ—Ç: {answer}\n\n### –ö–æ–Ω–µ—Ü"
            
            # –ù–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
            new_prompt = create_enhanced_training_text(question, answer, "enhanced")
            
            comparison['old_prompts'].append({
                "question": question,
                "prompt": old_prompt,
                "length": len(old_prompt)
            })
            
            comparison['new_prompts'].append({
                "question": question,
                "prompt": new_prompt,
                "length": len(new_prompt)
            })
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–∏—è
            improvement = {
                "question": question,
                "length_increase": len(new_prompt) - len(old_prompt),
                "has_context": "—ç–∫—Å–ø–µ—Ä—Ç" in new_prompt.lower(),
                "has_specialization": "—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è" in new_prompt.lower(),
                "has_technical_terms": any(term in new_prompt.lower() for term in ["—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è", "–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", "–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ"])
            }
            comparison['improvements'].append(improvement)
        
        return comparison
    
    def generate_quality_report(self, test_data: List[Dict]) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –∫–∞—á–µ—Å—Ç–≤–µ
        
        Args:
            test_data: –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            
        Returns:
            –û—Ç—á–µ—Ç –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
        """
        print("üìã –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç –æ –∫–∞—á–µ—Å—Ç–≤–µ...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        prompt_results = self.test_prompt_templates(test_data)
        validation_results = self.test_data_validation(test_data)
        comparison_results = self.compare_old_vs_new_prompts(test_data)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = f"""
# üìä –û–¢–ß–ï–¢ –û –ö–ê–ß–ï–°–¢–í–ï –£–õ–£–ß–®–ï–ù–ò–ô

## üéØ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
- –í—Å–µ–≥–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–∞—Ä: {validation_results['total']}
- –ü—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é: {validation_results['passed']} ({validation_results['passed']/validation_results['total']*100:.1f}%)
- –ù–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é: {validation_results['failed']} ({validation_results['failed']/validation_results['total']*100:.1f}%)

## üìà –û—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
- –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {validation_results.get('avg_score', 0):.1f}/10
- –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: {validation_results.get('min_score', 0)}/10
- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: {validation_results.get('max_score', 0)}/10

## üîß –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
{chr(10).join(f"- {issue}" for issue in set(validation_results['issues']))}

## üìù –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤
### –£–ª—É—á—à–µ–Ω–∏—è –≤ –Ω–æ–≤—ã—Ö –ø—Ä–æ–º–ø—Ç–∞—Ö:
"""
        
        for improvement in comparison_results['improvements']:
            report += f"""
**–í–æ–ø—Ä–æ—Å:** {improvement['question'][:50]}...
- –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã: +{improvement['length_increase']} —Å–∏–º–≤–æ–ª–æ–≤
- –î–æ–±–∞–≤–ª–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç —ç–∫—Å–ø–µ—Ä—Ç–∞: {'‚úÖ' if improvement['has_context'] else '‚ùå'}
- –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {'‚úÖ' if improvement['has_specialization'] else '‚ùå'}
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã: {'‚úÖ' if improvement['has_technical_terms'] else '‚ùå'}
"""
        
        report += f"""
## üöÄ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é

1. **–ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö**: {validation_results['failed']} –ø–∞—Ä –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é
2. **–ü—Ä–æ–º–ø—Ç-—à–∞–±–ª–æ–Ω—ã**: –ù–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –±–æ–ª—å—à–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
3. **–í–∞–ª–∏–¥–∞—Ü–∏—è**: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–∏–∑–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
4. **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è**: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞

## üìä –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
"""
        
        if validation_results.get('avg_score', 0) >= 7:
            report += "‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö —Ö–æ—Ä–æ—à–µ–µ, —É–ª—É—á—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã"
        elif validation_results.get('avg_score', 0) >= 5:
            report += "‚ö†Ô∏è –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ, –µ—Å—Ç—å –º–µ—Å—Ç–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π"
        else:
            report += "‚ùå –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –Ω–∏–∑–∫–æ–µ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞"
        
        return report
    
    def save_results(self, results: Dict, output_path: str):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Args:
            results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        """
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_path}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π –∫–∞—á–µ—Å—Ç–≤–∞...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data_path = "output/base-of-mining-and-mining.final.json"
    
    if not os.path.exists(test_data_path):
        print(f"‚ùå –§–∞–π–ª {test_data_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    with open(test_data_path, 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    test_data = data.get('qa_pairs', [])[:20]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 20 –ø–∞—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    if not test_data:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(test_data)} –ø–∞—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–µ—Ä
    tester = QualityTester()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = tester.generate_quality_report(test_data)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    report_path = "quality_improvements_report.md"
    with open(report_path, 'w', encoding='utf-8') as f:
        f.write(report)
    
    print(f"üìã –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {report_path}")
    print("\n" + "="*50)
    print(report)
    print("="*50)


if __name__ == "__main__":
    main()


