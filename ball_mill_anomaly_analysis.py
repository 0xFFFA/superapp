#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞–Ω–æ–º–∞–ª–∏–π –≤ —Ä–∞–±–æ—Ç–µ —à–∞—Ä–æ–≤–æ–π –º–µ–ª—å–Ω–∏—Ü—ã
–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 2025
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, timedelta
import warnings
warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
plt.rcParams['font.family'] = 'DejaVu Sans'
plt.rcParams['axes.unicode_minus'] = False

class BallMillAnomalyAnalyzer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞–Ω–æ–º–∞–ª–∏–π –≤ —Ä–∞–±–æ—Ç–µ —à–∞—Ä–æ–≤–æ–π –º–µ–ª—å–Ω–∏—Ü—ã"""
    
    def __init__(self):
        self.data = None
        self.anomalies = {}
        
    def generate_test_data(self, days=30, freq='5min'):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞—Ä–æ–≤–æ–π –º–µ–ª—å–Ω–∏—Ü—ã
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        - days: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö
        - freq: —á–∞—Å—Ç–æ—Ç–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–π
        """
        print("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —à–∞—Ä–æ–≤–æ–π –º–µ–ª—å–Ω–∏—Ü—ã...")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω–¥–µ–∫—Å
        start_date = datetime.now() - timedelta(days=days)
        time_index = pd.date_range(start=start_date, periods=days*24*12, freq=freq)  # –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        
        n_points = len(time_index)
        
        # –ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞)
        base_power = 850  # –∫–í—Ç
        base_ore_weight = 45  # —Ç–æ–Ω–Ω
        base_classifier_current = 120  # –ê
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ —Ñ–ª—É–∫—Ç—É–∞—Ü–∏—è–º–∏
        power_normal = np.random.normal(base_power, 15, n_points)
        ore_weight_normal = np.random.normal(base_ore_weight, 3, n_points)
        classifier_current_normal = np.random.normal(base_classifier_current, 8, n_points)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (—Å–º–µ–Ω–∞ —Å–º–µ–Ω, —Å—É—Ç–æ—á–Ω—ã–µ —Ü–∏–∫–ª—ã)
        hour_cycle = np.sin(2 * np.pi * np.arange(n_points) / (24*12)) * 10  # —Å—É—Ç–æ—á–Ω—ã–π —Ü–∏–∫–ª
        shift_cycle = np.sin(2 * np.pi * np.arange(n_points) / (8*12)) * 5   # —Å–º–µ–Ω–Ω—ã–π —Ü–∏–∫–ª
        
        power_normal += hour_cycle + shift_cycle
        ore_weight_normal += hour_cycle * 0.3
        classifier_current_normal += hour_cycle * 0.5
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏–∏ –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π
        power = power_normal.copy()
        ore_weight = ore_weight_normal.copy()
        classifier_current = classifier_current_normal.copy()
        
        # –í–Ω–æ—Å–∏–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∞–Ω–æ–º–∞–ª–∏–π
        self._add_anomalies(power, ore_weight, classifier_current, n_points)
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        self.data = pd.DataFrame({
            'timestamp': time_index,
            'power_kw': power,
            'ore_weight_tons': ore_weight,
            'classifier_current_a': classifier_current
        })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        self.data['power_per_ton'] = self.data['power_kw'] / self.data['ore_weight_tons']
        self.data['efficiency_ratio'] = self.data['ore_weight_tons'] / self.data['classifier_current_a']
        
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(self.data)} –∑–∞–ø–∏—Å–µ–π –∑–∞ {days} –¥–Ω–µ–π")
        return self.data
    
    def _add_anomalies(self, power, ore_weight, classifier_current, n_points):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∞–Ω–æ–º–∞–ª–∏–π –≤ –¥–∞–Ω–Ω—ã–µ"""
        
        # 1. –í–Ω–µ–∑–∞–ø–Ω—ã–µ —Å–∫–∞—á–∫–∏ –º–æ—â–Ω–æ—Å—Ç–∏ (–ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞)
        spike_indices = np.random.choice(n_points, size=15, replace=False)
        for idx in spike_indices:
            power[idx:idx+3] += np.random.uniform(100, 200)  # —Å–∫–∞—á–æ–∫ –Ω–∞ 3 —Ç–æ—á–∫–∏
            
        # 2. –ü–∞–¥–µ–Ω–∏–µ –≤–µ—Å–∞ —Ä—É–¥—ã (–ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∞—á–µ–π)
        drop_indices = np.random.choice(n_points, size=10, replace=False)
        for idx in drop_indices:
            ore_weight[idx:idx+5] *= 0.3  # —Ä–µ–∑–∫–æ–µ –ø–∞–¥–µ–Ω–∏–µ
            
        # 3. –ê–Ω–æ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
        anomaly_indices = np.random.choice(n_points, size=20, replace=False)
        for idx in anomaly_indices:
            if np.random.random() > 0.5:
                classifier_current[idx:idx+2] += np.random.uniform(50, 100)  # —Å–∫–∞—á–æ–∫
            else:
                classifier_current[idx:idx+2] *= 0.4  # –ø–∞–¥–µ–Ω–∏–µ
                
        # 4. –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π —Ç—Ä–µ–Ω–¥ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è)
        degradation_start = int(n_points * 0.9)  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10% –¥–∞–Ω–Ω—ã—Ö
        degradation_factor = np.linspace(1, 0.7, n_points - degradation_start)
        power[degradation_start:] *= degradation_factor
        classifier_current[degradation_start:] *= (1 + (1 - degradation_factor) * 0.3)
        
        # 5. –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∞–Ω–æ–º–∞–ª–∏–∏ (–Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è)
        cycle_start = int(n_points * 0.3)
        cycle_end = int(n_points * 0.5)
        cycle_period = 20  # –ø–µ—Ä–∏–æ–¥ –∞–Ω–æ–º–∞–ª—å–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        for i in range(cycle_start, cycle_end, cycle_period):
            if i + 10 < cycle_end:
                power[i:i+10] += 80 * np.sin(np.linspace(0, 2*np.pi, 10))
                
        # 6. –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏ (–Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è)
        corr_anomaly_indices = np.random.choice(n_points, size=25, replace=False)
        for idx in corr_anomaly_indices:
            # –í—ã—Å–æ–∫–∞—è –º–æ—â–Ω–æ—Å—Ç—å –ø—Ä–∏ –Ω–∏–∑–∫–æ–º –≤–µ—Å–µ —Ä—É–¥—ã
            power[idx] += 150
            ore_weight[idx] *= 0.5
    
    def detect_statistical_anomalies(self, method='iqr', threshold=1.5):
        """
        –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        - method: 'iqr', 'zscore', 'modified_zscore'
        - threshold: –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        """
        print(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π –º–µ—Ç–æ–¥–æ–º {method}...")
        
        numeric_columns = ['power_kw', 'ore_weight_tons', 'classifier_current_a', 
                          'power_per_ton', 'efficiency_ratio']
        
        anomalies = {}
        
        for column in numeric_columns:
            data = self.data[column]
            
            if method == 'iqr':
                Q1 = data.quantile(0.25)
                Q3 = data.quantile(0.75)
                IQR = Q3 - Q1
                lower_bound = Q1 - threshold * IQR
                upper_bound = Q3 + threshold * IQR
                anomaly_mask = (data < lower_bound) | (data > upper_bound)
                
            elif method == 'zscore':
                z_scores = np.abs((data - data.mean()) / data.std())
                anomaly_mask = z_scores > threshold
                
            elif method == 'modified_zscore':
                median = data.median()
                mad = np.median(np.abs(data - median))
                modified_z_scores = 0.6745 * (data - median) / mad
                anomaly_mask = np.abs(modified_z_scores) > threshold
            
            anomalies[column] = {
                'indices': self.data[anomaly_mask].index.tolist(),
                'values': data[anomaly_mask].tolist(),
                'count': anomaly_mask.sum()
            }
        
        self.anomalies[method] = anomalies
        return anomalies
    
    def detect_correlation_anomalies(self, window_size=100):
        """
        –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π –º–µ–∂–¥—É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        """
        print("üîó –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π...")
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∑—è—â–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        window = window_size
        power_ore_corr = []
        power_current_corr = []
        ore_current_corr = []
        
        for i in range(window, len(self.data)):
            window_data = self.data.iloc[i-window:i]
            
            power_ore_corr.append(window_data['power_kw'].corr(window_data['ore_weight_tons']))
            power_current_corr.append(window_data['power_kw'].corr(window_data['classifier_current_a']))
            ore_current_corr.append(window_data['ore_weight_tons'].corr(window_data['classifier_current_a']))
        
        # –ù–∞—Ö–æ–¥–∏–º –∞–Ω–æ–º–∞–ª—å–Ω—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        corr_data = pd.DataFrame({
            'power_ore_corr': power_ore_corr,
            'power_current_corr': power_current_corr,
            'ore_current_corr': ore_current_corr
        })
        
        # –ê–Ω–æ–º–∞–ª–∏–∏ - –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏, —Å–∏–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞—é—â–∏–µ—Å—è –æ—Ç –º–µ–¥–∏–∞–Ω—ã
        corr_anomalies = {}
        for col in corr_data.columns:
            median_corr = corr_data[col].median()
            mad = np.median(np.abs(corr_data[col] - median_corr))
            threshold = 2.5 * mad
            
            anomaly_mask = np.abs(corr_data[col] - median_corr) > threshold
            corr_anomalies[col] = {
                'indices': corr_data[anomaly_mask].index.tolist(),
                'values': corr_data[col][anomaly_mask].tolist(),
                'count': anomaly_mask.sum()
            }
        
        self.anomalies['correlation'] = corr_anomalies
        return corr_anomalies
    
    def detect_trend_anomalies(self, window_size=200):
        """
        –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π
        –ò—â–µ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç—Ä–µ–Ω–¥–∞—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        """
        print("üìà –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π...")
        
        numeric_columns = ['power_kw', 'ore_weight_tons', 'classifier_current_a']
        trend_anomalies = {}
        
        for column in numeric_columns:
            data = self.data[column].values
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∑—è—â–∏–µ —Ç—Ä–µ–Ω–¥—ã
            trends = []
            for i in range(window_size, len(data)):
                window_data = data[i-window_size:i]
                # –ü—Ä–æ—Å—Ç–∞—è –ª–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
                x = np.arange(len(window_data))
                slope = np.polyfit(x, window_data, 1)[0]
                trends.append(slope)
            
            # –ù–∞—Ö–æ–¥–∏–º –∞–Ω–æ–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã
            trends = np.array(trends)
            median_trend = np.median(trends)
            mad = np.median(np.abs(trends - median_trend))
            threshold = 3 * mad
            
            anomaly_mask = np.abs(trends - median_trend) > threshold
            trend_anomalies[column] = {
                'indices': np.where(anomaly_mask)[0].tolist(),
                'trends': trends[anomaly_mask].tolist(),
                'count': anomaly_mask.sum()
            }
        
        self.anomalies['trend'] = trend_anomalies
        return trend_anomalies
    
    def visualize_anomalies(self, save_plots=True):
        """
        –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π
        """
        print("üìä –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π...")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è
        plt.style.use('seaborn-v0_8')
        fig = plt.figure(figsize=(20, 15))
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã
        ax1 = plt.subplot(3, 2, 1)
        plt.plot(self.data['timestamp'], self.data['power_kw'], 'b-', alpha=0.7, label='–ú–æ—â–Ω–æ—Å—Ç—å (–∫–í—Ç)')
        plt.title('–ú–æ—â–Ω–æ—Å—Ç—å —à–∞—Ä–æ–≤–æ–π –º–µ–ª—å–Ω–∏—Ü—ã', fontsize=14, fontweight='bold')
        plt.ylabel('–ú–æ—â–Ω–æ—Å—Ç—å (–∫–í—Ç)')
        plt.legend()
        plt.grid(True, alpha=0.3)
        
        ax2 = plt.subplot(3, 2, 2)
        plt.plot(self.data['timestamp'], self.data['ore_weight_tons'], 'g-', alpha=0.7, label='–í–µ—Å —Ä—É–¥—ã (—Ç)')
        plt.title('–í–µ—Å —Ä—É–¥—ã', fontsize=14, fontweight='bold')
        plt.ylabel('–í–µ—Å (—Ç–æ–Ω–Ω—ã)')
        plt.legend()
        plt.grid(True, alpha=0.3)
        
        ax3 = plt.subplot(3, 2, 3)
        plt.plot(self.data['timestamp'], self.data['classifier_current_a'], 'r-', alpha=0.7, label='–¢–æ–∫ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ (–ê)')
        plt.title('–¢–æ–∫ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞', fontsize=14, fontweight='bold')
        plt.ylabel('–¢–æ–∫ (–ê)')
        plt.legend()
        plt.grid(True, alpha=0.3)
        
        # –ü—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        ax4 = plt.subplot(3, 2, 4)
        plt.plot(self.data['timestamp'], self.data['power_per_ton'], 'm-', alpha=0.7, label='–ú–æ—â–Ω–æ—Å—Ç—å/—Ç–æ–Ω–Ω–∞')
        plt.title('–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–∫–í—Ç/—Ç)', fontsize=14, fontweight='bold')
        plt.ylabel('–∫–í—Ç/—Ç')
        plt.legend()
        plt.grid(True, alpha=0.3)
        
        # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
        ax5 = plt.subplot(3, 2, 5)
        corr_matrix = self.data[['power_kw', 'ore_weight_tons', 'classifier_current_a']].corr()
        sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', center=0, ax=ax5)
        plt.title('–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞', fontsize=14, fontweight='bold')
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        ax6 = plt.subplot(3, 2, 6)
        self.data[['power_kw', 'ore_weight_tons', 'classifier_current_a']].hist(alpha=0.7, ax=ax6)
        plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤', fontsize=14, fontweight='bold')
        plt.legend(['–ú–æ—â–Ω–æ—Å—Ç—å', '–í–µ—Å —Ä—É–¥—ã', '–¢–æ–∫ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞'])
        
        plt.tight_layout()
        
        if save_plots:
            plt.savefig('ball_mill_analysis.png', dpi=300, bbox_inches='tight')
            print("üíæ –ì—Ä–∞—Ñ–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ball_mill_analysis.png")
        
        plt.show()
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–π
        self._plot_anomaly_details()
    
    def _plot_anomaly_details(self):
        """–î–µ—Ç–∞–ª—å–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π"""
        if not self.anomalies:
            print("‚ö†Ô∏è –ê–Ω–æ–º–∞–ª–∏–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –º–µ—Ç–æ–¥—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è.")
            return
        
        fig, axes = plt.subplots(2, 2, figsize=(16, 12))
        axes = axes.flatten()
        
        methods = list(self.anomalies.keys())
        colors = ['red', 'blue', 'green', 'orange']
        
        for i, method in enumerate(methods[:4]):
            if method in self.anomalies:
                ax = axes[i]
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–æ–º–∞–ª–∏–π –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
                param_counts = {}
                for param, data in self.anomalies[method].items():
                    if isinstance(data, dict) and 'count' in data:
                        param_counts[param] = data['count']
                
                if param_counts:
                    params = list(param_counts.keys())
                    counts = list(param_counts.values())
                    
                    bars = ax.bar(params, counts, color=colors[i], alpha=0.7)
                    ax.set_title(f'–ê–Ω–æ–º–∞–ª–∏–∏: {method}', fontweight='bold')
                    ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–æ–º–∞–ª–∏–π')
                    ax.tick_params(axis='x', rotation=45)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
                    for bar, count in zip(bars, counts):
                        ax.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.1,
                               str(count), ha='center', va='bottom')
        
        plt.tight_layout()
        plt.savefig('anomaly_details.png', dpi=300, bbox_inches='tight')
        print("üíæ –î–µ—Ç–∞–ª–∏ –∞–Ω–æ–º–∞–ª–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ anomaly_details.png")
        plt.show()
    
    def generate_report(self):
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–º –∞–Ω–æ–º–∞–ª–∏—è–º
        """
        print("üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")
        
        report = []
        report.append("=" * 60)
        report.append("–û–¢–ß–ï–¢ –ü–û –ê–ù–ê–õ–ò–ó–£ –ê–ù–û–ú–ê–õ–ò–ô –®–ê–†–û–í–û–ô –ú–ï–õ–¨–ù–ò–¶–´")
        report.append("=" * 60)
        report.append(f"–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        report.append(f"–ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {self.data['timestamp'].min()} - {self.data['timestamp'].max()}")
        report.append(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π: {len(self.data)}")
        report.append("")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∞–Ω–Ω—ã–º
        report.append("–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ü–ê–†–ê–ú–ï–¢–†–ê–ú:")
        report.append("-" * 40)
        for col in ['power_kw', 'ore_weight_tons', 'classifier_current_a']:
            data = self.data[col]
            report.append(f"{col}:")
            report.append(f"  –°—Ä–µ–¥–Ω–µ–µ: {data.mean():.2f}")
            report.append(f"  –ú–µ–¥–∏–∞–Ω–∞: {data.median():.2f}")
            report.append(f"  –°—Ç–¥. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {data.std():.2f}")
            report.append(f"  –ú–∏–Ω: {data.min():.2f}")
            report.append(f"  –ú–∞–∫—Å: {data.max():.2f}")
            report.append("")
        
        # –ê–Ω–∞–ª–∏–∑ –∞–Ω–æ–º–∞–ª–∏–π
        if self.anomalies:
            report.append("–û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ê–ù–û–ú–ê–õ–ò–ò:")
            report.append("-" * 40)
            
            for method, anomalies in self.anomalies.items():
                report.append(f"\n–ú–µ—Ç–æ–¥: {method.upper()}")
                total_anomalies = 0
                
                for param, data in anomalies.items():
                    if isinstance(data, dict) and 'count' in data:
                        count = data['count']
                        total_anomalies += count
                        report.append(f"  {param}: {count} –∞–Ω–æ–º–∞–ª–∏–π")
                
                report.append(f"  –í—Å–µ–≥–æ –∞–Ω–æ–º–∞–ª–∏–π: {total_anomalies}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        report.append("\n–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        report.append("-" * 40)
        
        if 'iqr' in self.anomalies:
            power_anomalies = self.anomalies['iqr'].get('power_kw', {}).get('count', 0)
            if power_anomalies > 20:
                report.append("‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–æ–º–∞–ª–∏–π –º–æ—â–Ω–æ—Å—Ç–∏ - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É –º–µ–ª—å–Ω–∏—Ü—ã")
            
            ore_anomalies = self.anomalies['iqr'].get('ore_weight_tons', {}).get('count', 0)
            if ore_anomalies > 15:
                report.append("‚ö†Ô∏è –ê–Ω–æ–º–∞–ª–∏–∏ –≤–µ—Å–∞ —Ä—É–¥—ã - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –ø–æ–¥–∞—á–∏")
            
            current_anomalies = self.anomalies['iqr'].get('classifier_current_a', {}).get('count', 0)
            if current_anomalies > 15:
                report.append("‚ö†Ô∏è –ê–Ω–æ–º–∞–ª–∏–∏ —Ç–æ–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞")
        
        if 'correlation' in self.anomalies:
            corr_anomalies = sum(data.get('count', 0) for data in self.anomalies['correlation'].values())
            if corr_anomalies > 10:
                report.append("‚ö†Ô∏è –ù–∞—Ä—É—à–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π - –≤–æ–∑–º–æ–∂–Ω—ã —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
        
        report.append("\n–û–ë–©–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        report.append("1. –†–µ–≥—É–ª—è—Ä–Ω–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –º–æ—â–Ω–æ—Å—Ç—å/–≤–µ—Å —Ä—É–¥—ã")
        report.append("2. –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Ç—Ä–µ–Ω–¥—ã –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è")
        report.append("3. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–µ—Ä—Ç—ã –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
        report.append("4. –ü—Ä–æ–≤–µ—Å—Ç–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π")
        
        report_text = "\n".join(report)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        with open('ball_mill_anomaly_report.txt', 'w', encoding='utf-8') as f:
            f.write(report_text)
        
        print("üíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ ball_mill_anomaly_report.txt")
        print("\n" + report_text)
        
        return report_text

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"""
    print("üè≠ –ê–ù–ê–õ–ò–ó –ê–ù–û–ú–ê–õ–ò–ô –®–ê–†–û–í–û–ô –ú–ï–õ–¨–ù–ò–¶–´")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = BallMillAnomalyAnalyzer()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = analyzer.generate_test_data(days=30, freq='5min')
    
    # –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º –∞–Ω–æ–º–∞–ª–∏–∏ —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
    print("\nüîç –û–ë–ù–ê–†–£–ñ–ï–ù–ò–ï –ê–ù–û–ú–ê–õ–ò–ô:")
    print("-" * 30)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã
    iqr_anomalies = analyzer.detect_statistical_anomalies(method='iqr', threshold=1.5)
    zscore_anomalies = analyzer.detect_statistical_anomalies(method='zscore', threshold=2.5)
    
    # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏
    corr_anomalies = analyzer.detect_correlation_anomalies(window_size=100)
    
    # –¢—Ä–µ–Ω–¥–æ–≤—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏
    trend_anomalies = analyzer.detect_trend_anomalies(window_size=200)
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    print("\nüìä –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø:")
    print("-" * 20)
    analyzer.visualize_anomalies(save_plots=True)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    print("\nüìã –û–¢–ß–ï–¢:")
    print("-" * 15)
    report = analyzer.generate_report()
    
    print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print("üìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
    print("  - ball_mill_analysis.png (–æ—Å–Ω–æ–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏)")
    print("  - anomaly_details.png (–¥–µ—Ç–∞–ª–∏ –∞–Ω–æ–º–∞–ª–∏–π)")
    print("  - ball_mill_anomaly_report.txt (–æ—Ç—á–µ—Ç)")

if __name__ == "__main__":
    main()

